"""
Base Topological Encoder Classes
"""
from abc import abstractmethod, ABCMeta
from typing import TypeVar, Tuple, Dict, List, Generic, Optional, Type, Any
from qiskit import QuantumRegister, QuantumCircuit, ClassicalRegister
from qiskit.circuit.quantumregister import Qubit

TQubit = TypeVar("TQubit")


class LatticeError(Exception):
    """
    Lattice Inconsistency Errors
    """


class _Stabilizer(metaclass=ABCMeta):
    """
    A blueprint for stabilizer classes, such as plaquettes for surface codes.
    """

    def __init__(self, circ: QuantumCircuit, qubit_indices: List[List[Qubit]]):
        self.circ = circ
        self.qubit_indices = qubit_indices

    @abstractmethod
    def entangle(self):
        """
        Entangles qubits to form a plaquette
        """


class _TopologicalLattice(Generic[TQubit], metaclass=ABCMeta):
    """
    This abstract class contains a blueprint for lattice construction.
    """

    def __init__(
        self,
        circ: QuantumCircuit,
        qregisters: Dict[str, QuantumRegister],
        cregisters: Dict[str, ClassicalRegister],
        params: Dict[str, int],
        name: str,
    ):
        self.circ = circ
        self.qregisters = qregisters
        self.cregisters = cregisters
        self.name = name

        assert "data" in self.qregisters, "There should be a data qubits register."

        # add registerse to circ
        registers = list(self.qregisters.values()) + list(self.cregisters.values())
        self.circ.add_register(*registers)

        self.params = params

        self.qubit_indices, self.stabilizers = self.gen_qubit_indices_and_stabilizers()

    @abstractmethod
    def gen_qubit_indices_and_stabilizers(
        self,
    ) -> Tuple[List[List[Qubit]], List[Type[Any]]]:
        """
        Generates lattice blueprint for rotated surface code lattice with our
        chosen layout and numbering.

        Returns:
            qubit_indices (List[List[Qubit]]):
                List of lists of Qubits that comprise each plaquette.

            stabilizers (List[_Stabilizer]):
                List of stabilizers for each plaquette.
        """

    def entangle(
        self,
        qubit_indices: Optional[List[List[Qubit]]] = None,
        stabilizers: Optional[List[Type[_Stabilizer]]] = None,
    ) -> None:
        """
        Entangles plaquettes as per the instruction set stored in qubit_indices
        and stabilizers and generated by gen_qubit_indices_and_stabilizers

        Args:
            qubit_indices (Optional[List[List[Qubit]]]):
                List of lists of Qubits that comprise each plaquette.
                This is optional, and will be used instead of self.qubit_indices if provided.
            stabilizers (Optional[List[_Stabilizer]]):
                List of stabilizers for each plaquette.
                This is optional, and will be used instead of self.stabilizers if provided.
        """
        qubit_indices = qubit_indices if qubit_indices else self.qubit_indices
        stabilizers = stabilizers if stabilizers else self.stabilizers

        for i, stabilizer_cls in enumerate(stabilizers):
            stabilizer = stabilizer_cls(self.circ, qubit_indices[i])
            stabilizer.entangle()
            self.circ.barrier()

    @abstractmethod
    def logical_x_plus_reset(self) -> None:
        """
        Initialize/reset to a logical |x+> state.
        """

    @abstractmethod
    def logical_z_plus_reset(self) -> None:
        """
        Initialize/reset to a logical |z+> state.
        """

    @abstractmethod
    def logical_x(self) -> None:
        """
        Logical X operator on the topological qubit.
        """

    @abstractmethod
    def logical_z(self) -> None:
        """
        Logical Z operator on the topological qubit.
        """

    @abstractmethod
    def readout_x(self) -> None:
        """
        Convenience method to read-out the logical-X projection.
        """

    @abstractmethod
    def readout_z(self) -> None:
        """
        Convenience method to read-out the logical-Z projection.
        """

    @abstractmethod
    def lattice_readout_x(self) -> None:
        """
        Readout all data qubits that constitute the lattice.
        This readout can be used to extract a final round of stabilizer measurments,
        as well as a logical X readout.
        """

    @abstractmethod
    def lattice_readout_z(self) -> None:
        """
        Readout all data qubits that constitute the lattice.
        This readout can be used to extract a final round of stabilizer measurments,
        as well as a logical Z readout.
        """

    @abstractmethod
    def parse_readout(
        self, readout_string: str, readout_type: Optional[str] = None
    ) -> Tuple[int, Dict[str, List[TQubit]]]:
        """
        Helper method to turn a result string (e.g. 1 10100000 10010000) into an
        appropriate logical readout value and XOR-ed syndrome locations
        according to our grid coordinate convention.

        The implementation varies with different topological qubits,
        but here's an example from the rotated surface code:

        Args:
            readout_string (str):
                Readout of the form "0 00000000 00000000" (logical_readout syndrome_1 syndrome_0)
                or of the form "000000000 00000000 00000000" (lattice_readout syndrome_1 syndrome_0)
        Returns:
            logical_readout (int):
                logical readout value
            syndromes (Dict[str, List[TQubit]]]):
                key: syndrome type
                value: (time, row, col) of parsed syndrome hits (changes between consecutive rounds)
        """


class TopologicalQubit(Generic[TQubit], metaclass=ABCMeta):
    """
    A single topological code logical qubit.
    This stores a QuantumCircuit object onto which the topological circuit is built.
    This abstract class contains a list of abstract methods
    that should be implemented by subclasses.
    """

    def __init__(self, lattice: _TopologicalLattice, name: str, circ: QuantumCircuit):
        self.lattice = lattice
        self.name = name
        self.circ = circ

    def draw(self, **kwargs):
        """
        Convenience method to draw quantum circuit.
        """
        return self.circ.draw(**kwargs)

    def __str__(self):
        return self.circ.__str__()

    @abstractmethod
    def stabilize(self) -> None:
        """
        Run a single round of stabilization (entangle and measure).
        """

    def identity(self) -> None:
        """
        Inserts an identity on the data and syndrome qubits.
        This allows us to create an isolated noise model by inserting errors only on identity gates.
        """
        for register in self.lattice.qregisters.values():
            self.circ.id(register)
        self.circ.barrier()

    def identity_data(self) -> None:
        """
        Inserts an identity on the data qubits only.
        This allows us to create an isolated noise model by inserting errors only on identity gates.
        """
        self.circ.id(self.lattice.qregisters["data"])
        self.circ.barrier()

    def logical_x_plus_reset(self) -> None:
        """
        Initialize/reset to a logical |x+> state.
        """
        self.lattice.logical_x_plus_reset()

    def logical_z_plus_reset(self) -> None:
        """
        Initialize/reset to a logical |z+> state.
        """
        self.lattice.logical_z_plus_reset()

    def logical_x(self) -> None:
        """
        Logical X operator on the topological qubit.
        Defined as the left-most column on the X Syndrome Graph.
        """
        self.lattice.logical_x()

    def logical_z(self) -> None:
        """
        Logical Z operator on the topological qubit.
        Defined as the top-most row on the Z Syndrome Graph.
        """
        self.lattice.logical_z()

    def readout_x(self) -> None:
        """
        Convenience method to read-out the logical-X projection.
        """
        self.lattice.readout_x()

    def readout_z(self) -> None:
        """
        Convenience method to read-out the logical-Z projection.
        """
        self.lattice.readout_z()

    def lattice_readout_x(self) -> None:
        """
        Readout all data qubits that constitute the lattice.
        This readout can be used to extract a final round of X stabilizer measurments,
        as well as a logical X readout.
        """
        self.lattice.lattice_readout_x()

    def lattice_readout_z(self) -> None:
        """
        Readout all data qubits that constitute the lattice.
        This readout can be used to extract a final round of Z stabilizer measurments,
        as well as a logical Z readout.
        """
        self.lattice.lattice_readout_z()

    def parse_readout(
        self, readout_string: str, readout_type: Optional[str] = None
    ) -> Tuple[int, Dict[str, List[TQubit]]]:
        """
        Wrapper on helper method to turn a result string (e.g. 1 10100000 10010000) into an
        appropriate logical readout value and XOR-ed syndrome locations
        according to our grid coordinate convention.
        """
        return self.lattice.parse_readout(readout_string, readout_type)
